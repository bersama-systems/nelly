worker_processes  1;

events {}

http {

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

 resolver 127.0.0.11;  # Use Docker's built-in DNS resolver

    lua_package_path "/usr/local/openresty/lualib/?.lua;;";

    init_worker_by_lua_block {
        local function handler()
            local rl = require("rate_limit")
            rl.get_and_initialize_configuration()
        end

        local ok, err = ngx.timer.at(0, handler)
    }

    server {
        listen 80;

        location / {
           # Retrieve the Redis connection from the OpenResty context
           access_by_lua_block {
               local plan_limits = ngx.shared.plan_nodes
               local product_limits = ngx.shared.product_nodes
               local rl = require("rate_limit")
               rl.get_and_initialize_configuration()
               local delay, err, limit_node = rl.rate_limit("plan", ngx, plan_limits, nil, ngx.var.uri)
               if err then
                    ngx.log(ngx.ERR, "Failed to rate_limit, we are going to FAIL OPEN:", err)
               end
               if delay and delay > 1.0 then
                    ngx.status = 429
                    ngx.log(ngx.ERR, "\n plan limit reached: ", limit_node.name .. "\n")
                    ngx.say("Rate limit exceeded. Please try again later.")
                    ngx.exit(ngx.HTTP_TOO_MANY_REQUESTS)
               end

               delay, err, limit_node = rl.rate_limit("product", ngx, product_limits, ngx.var.request_method, ngx.var.uri)
                if err then
                    ngx.log(ngx.ERR, "Failed to rate_limit, we are going to FAIL OPEN:", err)
               end
               if delay and delay > 1.0 then
                    ngx.status = 429
                    ngx.log(ngx.ERR, "\n product limit reached: ", limit_node.name .. "\n")
                    ngx.say("Rate limit exceeded. Please try again later.")
                    ngx.exit(ngx.HTTP_TOO_MANY_REQUESTS)
               end
           }
            # Your application logic
            proxy_pass http://nodejs:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}