worker_processes  1;

events {}

http {

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

 resolver 127.0.0.11;  # Use Docker's built-in DNS resolver

    lua_package_path "/usr/local/openresty/lualib/?.lua;;";

    init_worker_by_lua_block {
        local function handler()
            local rl = require("rate_limit")
            rl.get_and_initialize_configuration("plan") -- includes plan AND product limits
            rl.get_and_initialize_configuration("conditional")
        end

        local ok, err = ngx.timer.at(0, handler)
    }

    server {
        listen 80;

        location / {
           set_by_lua $rate_limit_remaining 'return 0';
           set_by_lua $rate_limit_limit  'return 0';
           set_by_lua $rate_limit_conditional_limit  'return 0';
           set_by_lua $rate_limit_conditional_remaining  'return 0';
           set_by_lua $rate_limit_plan_limit  'return 0';
           set_by_lua $rate_limit_plan_remaining  'return 0';
           set_by_lua $rate_limit_product_limit  'return 0';
           set_by_lua $rate_limit_product_remaining  'return 0';
           set_by_lua $RateLimitName 'return ""';
           # Retrieve the Redis connection from the OpenResty context
           access_by_lua_block {
               local plan_limits = ngx.shared.plan_nodes
               local product_limits = ngx.shared.product_nodes
               local conditional_limits = ngx.shared.conditional_nodes

               local rl = require("rate_limit")

               local new_value, threshold,  err, best_node, limit_node = rl.rate_limit("conditional", ngx, conditional_limits, nil, ngx.var.uri)
               local delay = nil
               if new_value and threshold then
                  delay = new_value / threshold
               end
               if err then
                    ngx.log(ngx.ERR, "Failed to conditional rate_limit, we are going to FAIL OPEN:", err)
               end
               if best_node and limit_node then
                   ngx.var.rate_limit_conditional_limit = threshold
                   ngx.var.rate_limit_conditional_remaining = threshold - new_value
               end
               if delay and delay > 1.0 then
                   ngx.status = 429
                   ngx.header.RateLimit_Limit = threshold
                   ngx.header.RateLimit_Remaining = 0
                   ngx.header.X_RateLimit_conditional_limit = threshold
                   ngx.header.X_RateLimit_conditional_remaining = 0
                   ngx.log(ngx.ERR, "\n conditional limit found: ", best_node.name .. "\n")
                   ngx.say("Rate limit exceeded. Please try again later.")
                   ngx.exit(ngx.HTTP_TOO_MANY_REQUESTS)
               end

               new_value, threshold, err, best_node, limit_node = rl.rate_limit("plan", ngx, plan_limits, nil, ngx.var.uri)
               if new_value and threshold then
                  delay = new_value / threshold
               end
               if err then
                    ngx.log(ngx.ERR, "Failed to rate_limit, we are going to FAIL OPEN:", err)
               end
               if best_node and limit_node then
                    ngx.var.rate_limit_plan_limit = threshold
                    ngx.var.rate_limit_plan_remaining = threshold - new_value
               end
               if delay and delay > 1.0 then
                    ngx.status = 429
                    ngx.header.RateLimit_Limit = threshold
                    ngx.header.RateLimit_Remaining = 0
                    if tonumber(ngx.var.rate_limit_conditional_limit) > 0 then
                         ngx.header.X_RateLimit_conditional_limit = ngx.var.rate_limit_conditional_limit
                         ngx.header.X_RateLimit_conditional_remaining = ngx.var.rate_limit_conditional_remaining
                    end

                    ngx.header.X_RateLimit_plan_limit = threshold
                    ngx.header.X_RateLimit_plan_remaining = 0
                    ngx.log(ngx.ERR, "\n plan limit reached: ", best_node.name .. "\n")
                    ngx.say("Rate limit exceeded. Please try again later.")
                    ngx.exit(ngx.HTTP_TOO_MANY_REQUESTS)
               end

               new_value, threshold,  err, best_node, limit_node = rl.rate_limit("product", ngx, product_limits, ngx.var.request_method, ngx.var.uri)
               if err then
                    ngx.log(ngx.ERR, "Failed to rate_limit, we are going to FAIL OPEN:", err)
               end
               if new_value and threshold then
                    delay = new_value / threshold
               end
               local limit_name = "product"
               ngx.var.RateLimitName = limit_name

               if best_node and limit_node then
                   limit_name = best_node.short_name
                   if limit_name == nil then
                      limit_name = "product"
                   end
                   ngx.var.RateLimitName = limit_name
                   ngx.var.rate_limit_product_limit = threshold
                   ngx.var.rate_limit_product_remaining = threshold - new_value
               end
               if delay and delay > 1.0 then
                    ngx.status = 429
                    ngx.header.RateLimit_Limit = threshold
                    ngx.header.RateLimit_Remaining = 0
                    if tonumber(ngx.var.rate_limit_conditional_limit) > 0 then
                         ngx.header.X_RateLimit_conditional_limit = ngx.var.rate_limit_conditional_limit
                         ngx.header.X_RateLimit_conditional_remaining = ngx.var.rate_limit_conditional_remaining
                    end
                    if tonumber(ngx.var.rate_limit_plan_limit) > 0 then
                          ngx.header.X_RateLimit_plan_limit = ngx.var.rate_limit_plan_limit
                          ngx.header.X_RateLimit_plan_remaining = ngx.var.rate_limit_plan_remaining
                    end

                    ngx.header['X_RateLimit_product_'.. limit_name .. '_limit'] =  ngx.var.rate_limit_product_limit
                    ngx.header['X_RateLimit_product_'.. limit_name .. '_remaining'] =  ngx.var.rate_limit_product_remaining
                    ngx.log(ngx.ERR, "\n product limit reached: ", best_node.name .. "\n")
                    ngx.say("Rate limit exceeded. Please try again later.")
                    ngx.exit(ngx.HTTP_TOO_MANY_REQUESTS)
               end

           }
            # Your application logic
            proxy_pass http://nodejs:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            header_filter_by_lua_block {
                if tonumber(ngx.var.rate_limit_conditional_limit) > 0 then
                    ngx.header.X_RateLimit_conditional_limit = ngx.var.rate_limit_conditional_limit
                    ngx.header.X_RateLimit_conditional_remaining = ngx.var.rate_limit_conditional_remaining
                end
                if tonumber(ngx.var.rate_limit_plan_limit) > 0 then
                    ngx.header.X_RateLimit_plan_limit = ngx.var.rate_limit_plan_limit
                    ngx.header.X_RateLimit_plan_remaining = ngx.var.rate_limit_plan_remaining
                end
                if tonumber(ngx.var.rate_limit_product_limit) > 0 then
                    local limit_name = ngx.var.RateLimitName
                    ngx.header['X_RateLimit_product_'.. limit_name .. '_limit'] =  ngx.var.rate_limit_product_limit
                    ngx.header['X_RateLimit_product_'.. limit_name .. '_remaining'] = ngx.var.rate_limit_product_remaining
                end

            }
        }
    }
}