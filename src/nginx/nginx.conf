worker_processes  1;

events {}

http {

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

 resolver 127.0.0.11;  # Use Docker's built-in DNS resolver

    lua_package_path "/usr/local/openresty/lualib/?.lua;;";

    init_worker_by_lua_block {
        local cjson = require "cjson.safe"
        local constants = require("nelly_configuration")

        -- Read the contents of the JSON file
        local file_path = constants.LIMITS_JSON_FILE
        local file = assert(io.open(file_path, "r"))
        local json_str = file:read("*all")
        file:close()

        -- Parse the JSON data
        local json_data, err = cjson.decode(json_str)
        if not json_data then
            ngx.log(ngx.ERR, "Failed to decode JSON file:", err)
            return
        end

        -- Store the parsed JSON data in a shared variable
        ngx.shared.my_config = json_data
        local plan_nodes = {}
        local product_nodes = {}

        for _, node in ipairs(json_data) do
            if node.limit_class == "plan" then
                table.insert(plan_nodes, node)
            elseif node.limit_class == "product" then
                table.insert(product_nodes, node)
            else
                ngx.log(ngx.ERR, "ERROR: UNKNOWN NODE CLASS ENCOUNTERED: ")
            end
        end
        ngx.shared.plan_nodes = plan_nodes
        ngx.shared.product_nodes = product_nodes
    }


    server {
        listen 80;

        location / {
           # Retrieve the Redis connection from the OpenResty context
           access_by_lua_block {
               local plan_limits = ngx.shared.plan_nodes
               local product_limits = ngx.shared.product_nodes
               local rl = require("rate_limit")

               local delay, err, limit_node = rl.rate_limit("plan", ngx, plan_limits, nil, ngx.var.uri)
               if err then
                    ngx.log(ngx.ERR, "Failed to rate_limit, we are going to FAIL CLOSED:", err)
               end
               if delay and delay > 1.0 then
                    ngx.status = 429
                    ngx.log(ngx.ERR, "\n plan limit reached: ", limit_node.name .. "\n")
                    ngx.say("Rate limit exceeded. Please try again later.")
                    ngx.exit(ngx.HTTP_TOO_MANY_REQUESTS)
               end

               delay, err, limit_node = rl.rate_limit("product", ngx, product_limits, ngx.var.request_method, ngx.var.uri)
                if err then
                    ngx.log(ngx.ERR, "Failed to rate_limit, we are going to FAIL CLOSED:", err)
               end
               if delay and delay > 1.0 then
                    ngx.status = 429
                    ngx.log(ngx.ERR, "\n product limit reached: ", limit_node.name .. "\n")
                    ngx.say("Rate limit exceeded. Please try again later.")
                    ngx.exit(ngx.HTTP_TOO_MANY_REQUESTS)
               end
           }
            # Your application logic
            proxy_pass http://nodejs:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}