worker_processes  1;

events {}

http {
 resolver 127.0.0.11;  # Use Docker's built-in DNS resolver

    lua_package_path "/usr/local/openresty/lualib/?.lua;;";

    init_worker_by_lua_block {
        local cjson = require "cjson.safe"
        local constants = require("nelly_configuration")

        -- Read the contents of the JSON file
        local file_path = constants.LIMITS_JSON_FILE
        local file = assert(io.open(file_path, "r"))
        local json_str = file:read("*all")
        file:close()

        -- Parse the JSON data
        local json_data, err = cjson.decode(json_str)
        if not json_data then
            ngx.log(ngx.ERR, "Failed to decode JSON file:", err)
            return
        end

        -- Store the parsed JSON data in a shared variable
        ngx.shared.my_config = json_data
    }


    server {
        listen 80;

        location / {
           # Retrieve the Redis connection from the OpenResty context
           access_by_lua_block {
               local json_data = ngx.shared.my_config
               local rl = require("rate_limit")
               local delay, err = rl.rate_limit(ngx, json_data, ngx.var.request_method, ngx.var.uri)
               if err then
                    ngx.log(ngx.ERR, "Failed to rate_limit, we are going to FAIL OPEN:", err)
               end
               if delay and delay > 1.0 then
                    ngx.status = 429
                    ngx.say("Rate limit exceeded. Please try again later.")
                    ngx.exit(ngx.HTTP_TOO_MANY_REQUESTS)
               end

           }
            # Your application logic
            proxy_pass http://nodejs:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}